;;; Compiled snippets and support files for `rust-mode'
;;; Snippet definitions:
;;;
(yas-define-snippets 'rust-mode
                     '(("while-shadow.yas" "" "while .. { ... }" nil nil nil "/home/typas/.doom.d/snippets/rust-mode/while-shadow.yas" nil "while")
                       ("while-let-shadow.yas" "" "while let PATTERN = EXPR { ... }" nil nil nil "/home/typas/.doom.d/snippets/rust-mode/while-let-shadow.yas" nil "whilel")
                       ("vwc" "" "Vec::with_capacity(...)" nil nil nil "/home/typas/.doom.d/snippets/rust-mode/vec-with_capacity-shadow.yas" nil "vwc")
                       ("vec-shadow.yas" "" "vec![...]" nil nil nil "/home/typas/.doom.d/snippets/rust-mode/vec-shadow.yas" nil "v")
                       ("use-shadow.yas" "" "use ..." nil nil nil "/home/typas/.doom.d/snippets/rust-mode/use-shadow.yas" nil "use")
                       ("unsafe-shadow.yas" "" "unsafe { ... }" nil nil nil "/home/typas/.doom.d/snippets/rust-mode/unsafe-shadow.yas" nil "un")
                       ("union-shadow.yas" "" "union Type { ... }" nil nil nil "/home/typas/.doom.d/snippets/rust-mode/union-shadow.yas" nil nil)
                       ("type-shadow.yas" "" "type Name = ...;" nil nil nil "/home/typas/.doom.d/snippets/rust-mode/type-shadow.yas" nil "type")
                       ("trait_alias-shadow.yas" "" "trait ... { ... }" nil nil nil "/home/typas/.doom.d/snippets/rust-mode/trait_alias-shadow.yas" nil "trait_alias")
                       ("trait-shadow.yas" "" "trait ... { ... }" nil nil nil "/home/typas/.doom.d/snippets/rust-mode/trait-shadow.yas" nil "trait")
                       ("to_string-shadow.yas" "" ".to_string()" nil nil nil "/home/typas/.doom.d/snippets/rust-mode/to_string-shadow.yas" nil "ts")
                       ("struct_alias-shadow.yas" "" "struct" nil nil nil "/home/typas/.doom.d/snippets/rust-mode/struct_alias-shadow.yas" nil "struct_alias")
                       ("static-shadow.yas" "" "static VAR = ..." nil nil nil "/home/typas/.doom.d/snippets/rust-mode/static-shadow.yas" nil "static")
                       ("some-shadow.yas" "" "Some(...)" nil nil nil "/home/typas/.doom.d/snippets/rust-mode/some-shadow.yas" nil "so")
                       ("return-shadow.yas" "" "return" nil nil nil "/home/typas/.doom.d/snippets/rust-mode/return-shadow.yas" nil "ret")
                       ("result" "Result<${1:T}, ${2:E}>\n" "Result<T, E>" nil nil nil "/home/typas/.doom.d/snippets/rust-mode/result.yas" nil nil)
                       ("result-shadow.yas" "" "Result<T, E>" nil nil nil "/home/typas/.doom.d/snippets/rust-mode/result-shadow.yas" nil "res")
                       ("println-shadow.yas" "" "println!(...)" nil nil nil "/home/typas/.doom.d/snippets/rust-mode/println-shadow.yas" nil "p")
                       ("partial-shadow.yas" "" "impl PartialEq for Type" nil nil nil "/home/typas/.doom.d/snippets/rust-mode/partial-shadow.yas" nil "partial")
                       ("panic-shadow.yas" "" "panic!(...)" nil nil nil "/home/typas/.doom.d/snippets/rust-mode/panic-shadow.yas" nil "pa")
                       ("none-shadow.yas" "" "None" nil nil nil "/home/typas/.doom.d/snippets/rust-mode/none-shadow.yas" nil "no")
                       ("new-shadow.yas" "" "Type::new(...)" nil nil nil "/home/typas/.doom.d/snippets/rust-mode/new-shadow.yas" nil "new")
                       ("mod-shadow.yas" "" "mod" nil nil nil "/home/typas/.doom.d/snippets/rust-mode/mod-shadow.yas" nil "mod")
                       ("match_alias-shadow.yas" "" "match" nil nil nil "/home/typas/.doom.d/snippets/rust-mode/match_alias-shadow.yas" nil "match_alias")
                       ("match-shadow.yas" "" "match" nil nil nil "/home/typas/.doom.d/snippets/rust-mode/match-shadow.yas" nil "match")
                       ("macro" "macro_rules! ${1:name} {\n    ($2) => ($3);\n}\n" "macro_rules! name { (..) => (..); }" nil nil nil "/home/typas/.doom.d/snippets/rust-mode/macro.yas" nil "macro")
                       ("let-shadow.yas" "" "let" nil nil nil "/home/typas/.doom.d/snippets/rust-mode/let-shadow.yas" nil "let")
                       ("let-mut-shadow.yas" "" "let mut" nil nil nil "/home/typas/.doom.d/snippets/rust-mode/let-mut-shadow.yas" nil "letm")
                       ("lambda-shadow.yas" "" "anonymous function" nil nil nil "/home/typas/.doom.d/snippets/rust-mode/lambda-shadow.yas" nil "fn")
                       ("iter-shadow.yas" "" ".iter()" nil nil nil "/home/typas/.doom.d/snippets/rust-mode/iter-shadow.yas" nil "i")
                       ("into_iter-shadow.yas" "" ".into_iter()" nil nil nil "/home/typas/.doom.d/snippets/rust-mode/into_iter-shadow.yas" nil "ii")
                       ("inline-if-else-shadow.yas" "" "inline if-else" nil nil nil "/home/typas/.doom.d/snippets/rust-mode/inline-if-else-shadow.yas" nil "ife")
                       ("implpeq" "impl PartialEq for ${1:Type} {\n    fn eq(&self, other: &Self) -> bool {\n        $0\n    }\n}\n" "impl_partial_eq" nil nil nil "/home/typas/.doom.d/snippets/rust-mode/impl_partial_eq.yas" nil "impl_partial_eq")
                       ("impliter" "impl Iterator for ${1:Type} {\n    type Item = ${2:Type};\n    fn next(&mut self) -> Option<Self::Item> {\n        $0\n    }\n}\n" "impl_iterator" nil nil nil "/home/typas/.doom.d/snippets/rust-mode/impl_iterator.yas" nil "impl_iterator")
                       ("implfromstr" "impl FromStr for ${1:Type} {\n    type Err = ${2:Error};\n\n    fn from_str(s: &str) -> Result<Self, Self::Err> {\n        `%`$3\n        Ok(Self{$0})\n    }\n}\n" "impl_fromstr" nil nil nil "/home/typas/.doom.d/snippets/rust-mode/impl_fromstr.yas" nil "impl_fromstr")
                       ("implfrom" "impl From<${1:From} for ${2:Type} {\n    fn from(source: $1) -> Self {\n        `%`$3\n        Self {\n            `%`$0\n        }\n    }\n}\n" "impl_from" nil nil nil "/home/typas/.doom.d/snippets/rust-mode/impl_from.yas" nil "impl_from")
                       ("implerror" "impl std::error::Error for ${1:Type} {\n    fn source(&self) -> Option<&(dyn std::error::Error + 'static) {\n        $0\n        todo!()\n    }\n}\n" "impl_error" nil nil nil "/home/typas/.doom.d/snippets/rust-mode/impl_error.yas" nil "impl_error")
                       ("impldisp" "impl std::fmt::Display for ${1:Type} {\n    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {\n        write!(f, \"`%`$0\")\n    }\n}\n" "impl_display" nil nil nil "/home/typas/.doom.d/snippets/rust-mode/impl_display.yas" nil "impl_display")
                       ("implderefmut" "impl std::ops::DerefMut for ${1:Type} {\n    type Target = ${2:Type};\n    fn deref_mut(&mut self) -> &mut Self::Target {\n        &mut self.$0\n    }\n}\n" "impl_deref_mut" nil nil nil "/home/typas/.doom.d/snippets/rust-mode/impl_deref_mut.yas" nil "implderefmut")
                       ("implderef" "impl std::ops::Deref for ${1:Type} {\n    type Target = ${2:Type};\n    fn deref(&self) -> &Self::Target {\n        &self.$0\n    }\n}\n" "impl_deref" nil nil nil "/home/typas/.doom.d/snippets/rust-mode/impl_deref.yas" nil "implderef")
                       ("implasref" "impl std::convert::AsRef<${1:Type}> for ${2:Type} {\n    fn as_ref(&self) -> &$2 {\n        $0\n    }\n}\n" "impl AsRef" nil nil nil "/home/typas/.doom.d/snippets/rust-mode/impl_asref.yas" nil nil)
                       ("iflet-shadow.yas" "" "if let ..." nil nil nil "/home/typas/.doom.d/snippets/rust-mode/iflet-shadow.yas" nil "ifl")
                       ("fromstr-shadow.yas" "" "impl FromStr for Type { fn from_str(...) }" nil nil nil "/home/typas/.doom.d/snippets/rust-mode/fromstr-shadow.yas" nil nil)
                       ("from-shadow.yas" "" "impl From<From> for Type { fn from(...) }" nil nil nil "/home/typas/.doom.d/snippets/rust-mode/from-shadow.yas" nil nil)
                       ("format-shadow.yas" "" "format!(..., ...)" nil nil nil "/home/typas/.doom.d/snippets/rust-mode/format-shadow.yas" nil "f")
                       ("fopen" "File::open(${1:`%`})\n" "File::open" nil nil nil "/home/typas/.doom.d/snippets/rust-mode/fopen.yas" nil nil)
                       ("fopen-shadow.yas" "" "File::open(...)" nil nil nil "/home/typas/.doom.d/snippets/rust-mode/fopen-shadow.yas" nil "fo")
                       ("filter_map-shadow.yas" "" ".filter_map(...)" nil nil nil "/home/typas/.doom.d/snippets/rust-mode/filter_map-shadow.yas" nil "fm")
                       ("extern-crate-shadow.yas" "" "extern crate" nil nil nil "/home/typas/.doom.d/snippets/rust-mode/extern-crate-shadow.yas" nil "ec")
                       ("error-shadow.yas" "" "impl Error for Type { fn source(...) }" nil nil nil "/home/typas/.doom.d/snippets/rust-mode/error-shadow.yas" nil "error")
                       ("eprintln-shadow.yas" "" "eprintln!(...)" nil nil nil "/home/typas/.doom.d/snippets/rust-mode/eprintln-shadow.yas" nil "ep")
                       ("display-shadow.yas" "" "impl Display for Type { fn fmt (...) }" nil nil nil "/home/typas/.doom.d/snippets/rust-mode/display-shadow.yas" nil nil)
                       ("deref_mut-shadow.yas" "" "impl DerefMut for Type" nil nil nil "/home/typas/.doom.d/snippets/rust-mode/deref_mut-shadow.yas" nil "deref_mut")
                       ("deref-shadow.yas" "" "impl Deref for Type" nil nil nil "/home/typas/.doom.d/snippets/rust-mode/deref-shadow.yas" nil "deref")
                       ("debug_assert-shadow.yas" "" "debug_assert!(...)" nil nil nil "/home/typas/.doom.d/snippets/rust-mode/debug_assert-shadow.yas" nil "dass")
                       ("const-shadow.yas" "" "const VAR = ..." nil nil nil "/home/typas/.doom.d/snippets/rust-mode/const-shadow.yas" nil "const")
                       ("case-shadow.yas" "" "pattern => expression," nil nil nil "/home/typas/.doom.d/snippets/rust-mode/case-shadow.yas" nil nil)
                       ("block-shadow.yas" "" "block" nil nil nil "/home/typas/.doom.d/snippets/rust-mode/block-shadow.yas" nil "b")
                       ("assignment-shadow.yas" "" "assignment" nil nil nil "/home/typas/.doom.d/snippets/rust-mode/assignment-shadow.yas" nil "=")
                       ("assert_ne-shadow.yas" "" "assert_ne!(..., ...)" nil nil nil "/home/typas/.doom.d/snippets/rust-mode/assert_ne-shadow.yas" nil "assn")
                       ("assert_eq-shadow.yas" "" "assert_eq!(..., ...)" nil nil nil "/home/typas/.doom.d/snippets/rust-mode/assert_eq-shadow.yas" nil "asse")
                       ("assert-shadow.yas" "" "assert!(...)" nil nil nil "/home/typas/.doom.d/snippets/rust-mode/assert-shadow.yas" nil "ass")
                       ("asref-shadow.yas" "" "impl AsRef<Type> for Type" nil nil nil "/home/typas/.doom.d/snippets/rust-mode/asref-shadow.yas" nil "asref")
                       ("arrow-shadow.yas" "" "x => y" nil nil nil "/home/typas/.doom.d/snippets/rust-mode/arrow-shadow.yas" nil "=>")))


;;; Do not edit! File generated at Sun Mar 27 07:58:53 2022
